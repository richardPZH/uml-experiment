function [recall, precision] = test(X, bit, method)
%
% demo code for generating small code and evaluation
% input X should be a n*d matrix, n is the number of images, d is dimension
% ''method'' is the method used to generate small code
% ''method'' can be 'ITQ', 'RR', 'LSH' and 'SKLSH' 
%


% parameters
averageNumberNeighbors = 50;    % ground truth is 50 nearest neighbor
num_test = 1000;                % 1000 query test point, rest are database
bit = bit;                      % bits used


% split up into training and test set
[ndata, D] = size(X);
R = randperm(ndata);
Xtest = X(R(1:num_test),:);
R(1:num_test) = [];
Xtraining = X(R,:);
num_training = size(Xtraining,1);
clear X;

% define ground-truth neighbors (this is only used for the evaluation):
R = randperm(num_training);
DtrueTraining = distMat(Xtraining(R(1:100),:),Xtraining); % sample 100 points to find a threshold
Dball = sort(DtrueTraining,2);
clear DtrueTraining;
Dball = mean(Dball(:,averageNumberNeighbors));
% scale data so that the target distance is 1
Xtraining = Xtraining / Dball;
Xtest = Xtest / Dball;
Dball = 1;
% threshold to define ground truth
DtrueTestTraining = distMat(Xtest,Xtraining);
WtrueTestTraining = DtrueTestTraining < Dball;
clear DtrueTestTraining


% generate training ans test split and the data matrix
XX = [Xtraining; Xtest];
% center the data, VERY IMPORTANT
sampleMean = mean(XX,1);
XX = (XX - repmat(sampleMean,size(XX,1),1));


%several state of art methods
switch(method)
    
    % ITQ method proposed in our CVPR11 paper
    case 'ITQ'
        % PCA
        [pc, l] = eigs(cov(XX(1:num_training,:)),bit);
        XX = XX * pc;
        % ITQ
        [Y, R] = ITQ(XX(1:num_training,:),50);
        XX = XX*R;
        Y = zeros(size(XX));
        Y(XX>=0) = 1;
        Y = compactbit(Y>0);
    % RR method proposed in our CVPR11 paper
    case 'RR'
        % PCA
        [pc, l] = eigs(cov(XX(1:num_training,:)), bit);
        XX = XX * pc;
        % RR
        R = randn(size(XX,2),bit);
        [U S V] = svd(R);
        XX = XX*U(:,1:bit);
        Y = compactbit(XX>0);
   % SKLSH
   % M. Raginsky, S. Lazebnik. Locality Sensitive Binary Codes from
   % Shift-Invariant Kernels. NIPS 2009.
    case 'SKLSH' 
        RFparam.gamma = 1;
        RFparam.D = D;
        RFparam.M = bit;
        RFparam = RF_train(RFparam);
        B1 = RF_compress(XX(1:num_training,:), RFparam);
        B2 = RF_compress(XX(num_training+1:end,:), RFparam);
        Y = [B1;B2];
    % Locality sensitive hashing (LSH)
     case 'LSH'
        XX = XX * randn(size(XX,2),bit);
        Y = zeros(size(XX));
        Y(XX>=0)=1;
        Y = compactbit(Y);
        
    % our own novel 1 first itq, than find a good s to improve the
    % sensitivity
    case 'ITQS'
        % PCA
        [pc, l] = eigs(cov(XX(1:num_training,:)),bit);
        %XX = XX * pc;
        % ITQ
        [Y, R] = ITQ( XX(1:num_training,:) * pc ,50 );
        %XX = XX*R;
        %Y = zeros(size(XX));
        %Y(XX>=0) = 1;                        %should We prevent this ?
        
        %new Y { -1 , 1 }^c
        Z =  XX(1:num_training,:) * pc * R;
        Y = ones( size( Z ) ) * -1 ;
        Y( Z>=0 ) = 1;
           
        q = 10;                               %q is fro [-q,q] user define boundary 0.1 0.2 0.5 1.0 2.0 3.0 7.0 11.0 17
        Q = eye( size( pc,1 ) );              %q is diag dxd matrix
        Q = ( q^2 / 3 ) * Q ;
        A1 = pc' * (XX(1:num_training,:))' * XX(1:num_training,:) * pc;
        A2 = pc' * Q * pc ;
        S = ( A1 + A1' + A2 + A2' ) \ ( R * Y' * XX(1:num_training,:) * pc )';  %omitting (RR')-1 ||  %not to use inv?? || RR' must be eye right?
        
        XX = XX * pc ;
        XX = XX*R;
        XX = XX*S;
        
        Y = zeros(size(XX));
        Y(XX>=0) = 1;
        
        Y = compactbit(Y>0);
        
    %3 iterative Fix S and R update Y, Fix S and Y update R , Fix R and Y
    %update S
    case 'ITQYSR'
        % PCA
        [pc, l] = eigs(cov(XX(1:num_training,:)),bit);
        X = XX(1:num_training,:) * pc;
        
        %get an orthogonal random rotation
        bit = size(X,2);
        R = randn(bit,bit);
        [U11 S2 V2] = svd(R);
        R = U11(:,1:bit);
        
        %get a diagnal matrix S , why diagnal?
        S = diag( randn( 1 ,bit ) );
        
        n_itear = 20;
        
        q = 10;                               %q is fro [-q,q] user define boundary 0.1 0.2 0.5 1.0 2.0 3.0 7.0 11.0 17
        Q = eye( size( pc,1 ) );              %q is diag dxd matrix
        Q = ( q^2 / 3 ) * Q ;
        A1 = pc' * (XX(1:num_training,:))' * XX(1:num_training,:) * pc;
        A2 = pc' * Q * pc ;
        TMP = ( A1 + A1' + A2 + A2' );
        %S = ( A1 + A1' + A2 + A2' ) \ ( R * Y' * X * pc )';  %omitting (RR')-1 ||  %not to use inv?? || RR' must be eye right?
        
        for i = 0 : n_itear
            %fix S and R update Y
            Z = X * S * R ;
            Y = ones(size(Z,1),size(Z,2)).*-1;
            Y(Z>=0) = 1;
            
            %fix S and Y update R
            C = Y' * X * S;                                 % need 1/2 ?
            [UB,sigma,UA] = svd(C);    
            R = UA * UB'
            
            %fix R and Y update S
            S =  TMP \ ( R * Y' * XX(1:num_training,:) * pc )'
            
        end
        
        XX = XX * pc ;
        XX = XX*S;
        XX = XX*R;
        
        Y = zeros(size(XX));
        Y(XX>=0) = 1;
        
        Y = compactbit(Y>0);
        
    %iteratively find a better S to minisize J(S)
    case 'ITQI'
        % PCA
        [pc, l] = eigs(cov(XX(1:num_training,:)),bit);
        %XX = XX * pc;
        % ITQ
        [Y, R] = ITQ( XX(1:num_training,:) * pc ,50 );
        %XX = XX*R;
        %Y = zeros(size(XX));
        %Y(XX>=0) = 1;                        %should We prevent this ?
        
        %new Y { -1 , 1 }^c
        Z =  XX(1:num_training,:) * pc * R;
        Y = ones( size( Z ) ) * -1 ;
        Y( Z>=0 ) = 1;
           
        q = 2;                               %q is fro [-q,q] user define boundary 0.1 0.2 0.5 1.0 2.0 3.0 7.0 11.0 17
        Q = eye( size( pc,1 ) );              %q is diag dxd matrix
        Q = ( q^2 / 3 ) * Q ;
        
        n_itear = 5;
        A1 = pc' * (XX(1:num_training,:))' * XX(1:num_training,:) * pc;
        A2 = pc' * Q * pc ;
        TMP = ( A1 + A1' + A2 + A2' );
        for i=0:n_itear
            S =  TMP \ ( R * Y' * XX(1:num_training,:) * pc )'  %omitting (RR')-1 ||  %not to use inv?? || RR' must be eye right?
            Y = Y * S;
        end
        
        XX = XX * pc ;
        XX = XX*R;
        XX = XX*S;
        
        Y = zeros(size(XX));
        Y(XX>=0) = 1;
        
        Y = compactbit(Y>0);
end

% compute Hamming metric and compute recall precision
B1 = Y(1:size(Xtraining,1),:);
B2 = Y(size(Xtraining,1)+1:end,:);
Dhamm = hammingDist(B2, B1);
[recall, precision, rate] = recall_precision(WtrueTestTraining, Dhamm);

% plot the curve
switch(method)
    % ITQ method proposed in our CVPR11 paper
    case 'ITQ'
    plot(recall,precision,'-o');
    case 'RR'
    plot(recall,precision,'-s');
    case 'SKLSH' 
    plot(recall,precision,'-d');
     case 'LSH'
    plot(recall,precision,'-<');
    case 'ITQS'
    plot(recall,precision,'-X'); 
    case 'ITQYSR'
    plot(recall,precision,'-p');
    case 'ITQI'
    plot(recall,precision,'-*'); 
end

xlabel('Recall');
ylabel('Precision');





