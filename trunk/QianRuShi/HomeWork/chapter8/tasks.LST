C51 COMPILER V7.50   TASKS                                                                 06/28/2012 15:36:39 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE TASKS
OBJECT MODULE PLACED IN tasks.OBJ
COMPILER INVOKED BY: E:\keil\C51\BIN\C51.EXE tasks.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <rtx51tny.h>
   2          #include <reg52.h>
   3          #include <INTRINS.H>
   4          
   5          unsigned char ucMotorDrvPuls; //电机运转时初始值
   6          unsigned char FORREV=1; //1表示上行，0表示下行
   7          unsigned char STOPCUR=0;//1电梯停留在当前层，0不停留
   8          unsigned char CURFLR=1; //当前所在楼层
   9          unsigned char count=0;  //累计到COUNT即表示运行过一层
  10          
  11          #define UCTIMES 8 //设置电机转速
  12          #define OUTPUT P2 //电机驱动信号口
  13          #define COUNT 8   //电机每循环8次表示电梯经过一层楼
  14          
  15          sbit UP1=P3^4;
  16          sbit DOWN2=P3^3;
  17          sbit UP2=P3^2;
  18          sbit DOWN3=P3^1;
  19          sbit UP3=P3^0;
  20          sbit DOWN4=P1^7;
  21          sbit FLOOR1=P1^0;
  22          sbit FLOOR2=P1^1;
  23          sbit FLOOR3=P1^2;
  24          sbit FLOOR4=P1^3;
  25          sbit START=P1^4;
  26          sbit STOP=P1^5;
  27          sbit ALARM=P1^6;
  28          
  29          //报警位
  30          sbit alarmBit=P0^4;
  31          sbit upLight=P0^5;
  32          sbit downLight=P0^6;
  33          
  34          void time(unsigned int ucMs);//延时单位：ms
  35          void outPress();//按下电梯外按钮
  36          unsigned char inPress();//按下电梯内楼层按钮
  37          unsigned char elevator();//到达某一层返回1，否则返回0
  38          void storeUP(unsigned char);//存储当前所有上行请求
  39          void storeDOWN(unsigned char);//存储当前所有下行请求
  40          
  41          //延时函数
  42          void time(unsigned int ucMs);
  43          
  44          //初始化所有灯
  45          void initLights(void);
  46          
  47          //设置当前楼层
  48          void setFloor(int floor);
  49          
  50          //设置电梯向上运行灯
  51          void setUpLight();
  52          
  53          //设置电梯向下运行灯
  54          void setDownLight();
  55          
C51 COMPILER V7.50   TASKS                                                                 06/28/2012 15:36:39 PAGE 2   

  56          //设置电梯停止运行灯
  57          void setStopLight();
  58          
  59          //设置电梯向上运行灯
  60          void setAlarmLight();
  61          
  62          //设置电梯报警灯和喇叭
  63          void setAlarmLight();
  64          
  65          //关闭电梯报警灯和喇叭
  66          void offAlarmLight();
  67          
  68          
  69          //报警开关
  70          int alarmSwitch=1;
  71          
  72          unsigned char UP_req[5]={0,0,0,0,0}; //上行请求
  73          unsigned char DOWN_req[5]={0,0,0,0,0}; //下行请求
  74          
  75          //电机定位
  76          void position(void)
  77          {
  78   1        OUTPUT=0x01|(P2&0xf0);time(200);
  79   1        OUTPUT=0x02|(P2&0xf0);time(200);
  80   1        OUTPUT=0x04|(P2&0xf0);time(200);
  81   1        OUTPUT=0x08|(P2&0xf0);time(200);
  82   1        ucMotorDrvPuls=0x11;
  83   1        OUTPUT=0x01|(P2&0xf0);        
  84   1        
  85   1      }
  86          
  87          /****************************************/
  88          /*                 init task            */
  89          /****************************************/
  90          void elavator(void) _task_ 0
  91          { 
  92   1        time(100);  //Get others ready
  93   1        initLights();
  94   1        position();//电机定位
  95   1        ucMotorDrvPuls=0x11;
  96   1        OUTPUT=0x00|(P2&0xf0);//电机停止 
  97   1        setFloor(CURFLR);
  98   1        setUpLight();
  99   1        time(100);
 100   1        
 101   1        os_create_task( 1 );
 102   1        os_create_task( 2 );
 103   1        os_create_task( 3 );
 104   1      
 105   1        while(1)//主循环
 106   1        {
 107   2                do{
 108   3                        os_send_signal( 1 );
 109   3              
 110   3                        os_wait1( K_SIG ); //wait for fisrt scan to finish
 111   3      
 112   3                        os_send_signal( 2 );
 113   3              
 114   3                        os_wait1( K_SIG ); //wait for second scan to finish
 115   3      
 116   3                }while( STOPCUR == 1 );//电梯在当前层，电梯不动，可以继续接受请求
 117   2                  
C51 COMPILER V7.50   TASKS                                                                 06/28/2012 15:36:39 PAGE 3   

 118   2      
 119   2                if( inPress() )//按下电梯内楼层按钮
 120   2                {
 121   3                      do{
 122   4                                os_send_signal( 1 );
 123   4              
 124   4                                os_wait1( K_SIG ); //wait for fisrt scan to finish
 125   4      
 126   4                                os_send_signal( 2 );
 127   4              
 128   4                                os_wait1( K_SIG ); //wait for second scan to finish
 129   4      
 130   4                        }while( START );//等待启动按键按下，电梯不动，可以继续接受请求
 131   3                }
 132   2              
 133   2                os_send_signal( 3 );
 134   2      
 135   2                os_wait1( K_SIG );
 136   2      
 137   2                OUTPUT=0x00|(P2&0xf0);//电机停止，有请求时按下启动按钮启动
 138   2                
 139   2      
 140   2        }//end while-主循环   
 141   1      }
 142          
 143          //outpress task
 144          void task_outPress(void) _task_ 1
 145          {
 146   1              while( 1 )
 147   1              {
 148   2                      os_wait1( K_SIG );
 149   2      
 150   2                      outPress();
 151   2      
 152   2                      os_send_signal( 0 );
 153   2      
 154   2              }
 155   1      }
 156          
 157          //inPress task
 158          void task_inPress( void ) _task_ 2
 159          {
 160   1              while( 1 )
 161   1              {
 162   2                      os_wait1( K_SIG );
 163   2      
 164   2                      inPress();
 165   2      
 166   2                      os_send_signal( 0 );
 167   2      
 168   2              }
 169   1      }
 170          
 171          //motor task
 172          void task_motor( void ) _task_ 3
 173          {
 174   1              os_wait1( K_SIG );
 175   1              while( 1 )
 176   1              {
 177   2                  if(UP_req[1]==0&&UP_req[2]==0&&UP_req[3]==0 && DOWN_req[2]==0&&DOWN_req[3]==0&&DOWN_req[4]==0) 
 178   2                      {
 179   3                              os_send_signal( 0 );
C51 COMPILER V7.50   TASKS                                                                 06/28/2012 15:36:39 PAGE 4   

 180   3                              os_wait1( K_SIG );
 181   3                              continue;//没有请求，跳出电机运转循环，电梯不动
 182   3                      }
 183   2                        
 184   2                  if(FORREV)//上行 
 185   2                  { 
 186   3                        setUpLight();//上行灯亮
 187   3      
 188   3                        if(STOPCUR==1){
 189   4                              os_send_signal( 0 );
 190   4                              os_wait1( K_SIG );
 191   4                              continue;//没有请求，跳出电机运转循环，电梯不动
 192   4                        }//
 193   3      
 194   3                        if(elevator())//往上到达某一层
 195   3                    {
 196   4                              if(CURFLR==4) {
 197   5                                      setDownLight();
 198   5                                      os_send_signal( 0 );
 199   5                                      os_wait1( K_SIG );
 200   5                                      continue;//没有请求，跳出电机运转循环，电梯不动
 201   5                              }
 202   4      
 203   4                    }
 204   3                    OUTPUT=(ucMotorDrvPuls&0x0f)|(P2&0xf0);
 205   3                        ucMotorDrvPuls=_crol_(ucMotorDrvPuls,1);
 206   3                  }
 207   2                  if(!FORREV)//下行
 208   2                  {
 209   3                        setDownLight();//下行灯亮
 210   3      
 211   3                        if(STOPCUR==1){
 212   4                              os_send_signal( 0 );
 213   4                              os_wait1( K_SIG );
 214   4                              continue;//没有请求，跳出电机运转循环，电梯不动
 215   4                        }
 216   3      
 217   3                        if(elevator())//往下到达某一层
 218   3                    {
 219   4                              if(CURFLR==1) {
 220   5                              setUpLight();//到达一楼
 221   5                              os_send_signal( 0 );
 222   5                              os_wait1( K_SIG );
 223   5                              continue;//没有请求，跳出电机运转循环，电梯不动
 224   5                    }
 225   4                        }
 226   3                    OUTPUT=(ucMotorDrvPuls&0x0f)|(P2&0xf0);
 227   3                        ucMotorDrvPuls=_cror_(ucMotorDrvPuls,1);
 228   3                  }   
 229   2              
 230   2                  outPress();//按下电梯外按钮
 231   2                  //if(inPress())//按下电梯内楼层按钮
 232   2                      //{
 233   2                       // while(START)//等待启动按键按下
 234   2                        //{
 235   2                    //  outPress();
 236   2                      inPress();//电梯运行时，内部按钮按下，无需按启动按钮
 237   2                   // }
 238   2                      //}
 239   2      
 240   2                      os_wait( K_TMO , ( 380 - UCTIMES*16 ) / 10, 0 );
 241   2      
C51 COMPILER V7.50   TASKS                                                                 06/28/2012 15:36:39 PAGE 5   

 242   2              }
 243   1      
 244   1      }
 245          
 246          
 247          /****************************************/
 248          /*               按钮事件               */
 249          /****************************************/
 250          //按下电梯外按钮 
 251          void outPress()
 252          {
 253   1         //FORREV=1;
 254   1         if(!UP1)//1楼上
 255   1         {
 256   2           storeUP(1);
 257   2               if(CURFLR>1&&STOPCUR==1)//电梯不在一楼,且当前没其他请求，电梯马上自动启动
 258   2               {
 259   3                 FORREV=0;//向下运行
 260   3                 STOPCUR=0;
 261   3               }
 262   2               if(CURFLR==1)
 263   2               {
 264   3                 STOPCUR=1;//电梯停留在当前层
 265   3               }
 266   2         }
 267   1         if(!UP2)//2楼上
 268   1         {
 269   2           storeUP(2);
 270   2               if(CURFLR>2&&STOPCUR==1)//电梯在二楼以上
 271   2               {
 272   3                 FORREV=0;
 273   3                 STOPCUR=0;
 274   3               }
 275   2               if(CURFLR<2&&STOPCUR==1)
 276   2               {
 277   3                 FORREV=1;
 278   3                 STOPCUR=0;
 279   3               }
 280   2               if(CURFLR==2)
 281   2               {
 282   3                 STOPCUR=1;
 283   3               }
 284   2         }
 285   1         if(!UP3)//3楼上
 286   1         {
 287   2           storeUP(3);
 288   2               if(CURFLR>3&&STOPCUR==1)//电梯在三楼以上
 289   2               {
 290   3                 FORREV=0;
 291   3                 STOPCUR=0;
 292   3               }
 293   2               if(CURFLR<3&&STOPCUR==1)
 294   2               {
 295   3                 FORREV=1;
 296   3                 STOPCUR=0;
 297   3               }
 298   2               if(CURFLR==3)
 299   2               {
 300   3                 STOPCUR=1;
 301   3               }
 302   2         }
 303   1         if(!DOWN2)//2楼下
C51 COMPILER V7.50   TASKS                                                                 06/28/2012 15:36:39 PAGE 6   

 304   1         {
 305   2           storeDOWN(2);
 306   2               if(CURFLR>2&&STOPCUR==1)//电梯在二楼以上
 307   2               {
 308   3                 FORREV=0;
 309   3                 STOPCUR=0;
 310   3               }
 311   2               if(CURFLR<2&&STOPCUR==1)
 312   2               {
 313   3                 FORREV=1;
 314   3                 STOPCUR=0;
 315   3               }
 316   2               if(CURFLR==2)
 317   2               {
 318   3                 STOPCUR=1;
 319   3               }
 320   2         }
 321   1         if(!DOWN3)//3楼下
 322   1         {
 323   2           storeDOWN(3);
 324   2               if(CURFLR>3&&STOPCUR==1)//电梯在三楼以上
 325   2               {
 326   3                 FORREV=0;
 327   3                 STOPCUR=0;
 328   3               }
 329   2               if(CURFLR<3&&STOPCUR==1)
 330   2               {
 331   3                 FORREV=1;
 332   3                 STOPCUR=0;
 333   3               }
 334   2               if(CURFLR==3)
 335   2               {
 336   3                 STOPCUR=1;
 337   3               }
 338   2         }
 339   1         if(!DOWN4)//4楼下
 340   1         {
 341   2           storeDOWN(4);
 342   2               if(CURFLR<4&&STOPCUR==1)
 343   2               {
 344   3                 FORREV=1;
 345   3                 STOPCUR=0;
 346   3               }
 347   2               if(CURFLR==4)
 348   2               {
 349   3                 STOPCUR=1;
 350   3               }
 351   2         }
 352   1      }
 353          
 354          //按下电梯内楼层按钮
 355          unsigned char inPress()
 356          {
 357   1        
 358   1        int i;
 359   1        int flag=0;
 360   1      
 361   1        if(!FLOOR1)
 362   1        {     
 363   2          if(1<CURFLR)
 364   2              {
 365   3                STOPCUR=0;
C51 COMPILER V7.50   TASKS                                                                 06/28/2012 15:36:39 PAGE 7   

 366   3                UP_req[1]=1;
 367   3              }
 368   2              if(1==CURFLR)
 369   2              {
 370   3                STOPCUR=1;
 371   3              }
 372   2              return 1;
 373   2        }
 374   1        if(!FLOOR2)
 375   1        {
 376   2          if(2>CURFLR)//请求层大于当前层
 377   2              {
 378   3                UP_req[2]=1;
 379   3                STOPCUR=0;
 380   3              }
 381   2              if(2<CURFLR)
 382   2              {
 383   3                DOWN_req[2]=1;
 384   3                STOPCUR=0;
 385   3              }
 386   2              if(2==CURFLR)
 387   2              {
 388   3                STOPCUR=1;
 389   3              }
 390   2              return 1;
 391   2              
 392   2        }
 393   1        if(!FLOOR3)
 394   1        {
 395   2          if(3>CURFLR)//请求层大于当前层
 396   2              {
 397   3                UP_req[3]=1;
 398   3                STOPCUR=0;
 399   3              }
 400   2              if(3<CURFLR)
 401   2              {
 402   3                DOWN_req[3]=1;
 403   3                STOPCUR=0;
 404   3              }
 405   2              if(3==CURFLR)
 406   2              {
 407   3                STOPCUR=1;
 408   3              }
 409   2              return 1;
 410   2        }
 411   1      
 412   1        if(!FLOOR4)
 413   1        {
 414   2          if(4>CURFLR)
 415   2              {
 416   3            DOWN_req[4]=1;
 417   3                STOPCUR=0;
 418   3              }
 419   2              if(4==CURFLR)
 420   2              {
 421   3                STOPCUR=1;
 422   3              }
 423   2              return 1;
 424   2        }
 425   1        if(!START)
 426   1        {
 427   2          STOPCUR=0;
C51 COMPILER V7.50   TASKS                                                                 06/28/2012 15:36:39 PAGE 8   

 428   2              return 1;
 429   2        }
 430   1        if(!STOP)//紧急停止
 431   1        {
 432   2          while(START)//不响应其他按键
 433   2              {
 434   3                //亮灯
 435   3                setStopLight();
 436   3              }
 437   2              return 1;
 438   2        }
 439   1        if(!ALARM)
 440   1        {
 441   2                setAlarmLight();
 442   2              return 1;
 443   2        }
 444   1      
 445   1         if(FORREV==1)
 446   1         {
 447   2            //请求上行而进去电梯内选择的是下层
 448   2                for(i=CURFLR+1;i<=4;i++)
 449   2                {
 450   3                  if(UP_req[i]==1||DOWN_req[i]==1){flag=1;}
 451   3                }
 452   2                if(flag==0)//上层没请求
 453   2                {
 454   3                  FORREV=0;
 455   3                      
 456   3                }
 457   2              }
 458   1              if(FORREV==0)
 459   1              {
 460   2                 //请求下行而进去电梯内选择的是上层
 461   2                for(i=CURFLR-1;i>=1;i--)
 462   2                {
 463   3                  if(UP_req[i]==1||DOWN_req[i]==1){flag=1;}
 464   3                }
 465   2                if(flag==0)//上层没请求
 466   2                {
 467   3                  FORREV=1;
 468   3                      
 469   3                }
 470   2              }
 471   1        return 0;
 472   1      }
 473          
 474          /*******************************************************************/
 475          /*                       到达某一层返回1，否则返回0,                       */
 476          /*    亮灯、显示数字、请求清零、电机停止、确定接下去电机方向       */
 477          /*******************************************************************/
 478          unsigned char elevator()
 479          {
 480   1        count++;
 481   1        if(count==COUNT)
 482   1        {
 483   2              //正常情况
 484   2          if(FORREV==1)//判断上行是否到达请求楼层,上行请求优先处理
 485   2              {
 486   3                CURFLR++;
 487   3                setUpLight();//上行灯亮 
 488   3      
 489   3                
C51 COMPILER V7.50   TASKS                                                                 06/28/2012 15:36:39 PAGE 9   

 490   3      
 491   3                if(CURFLR==2)//到达二楼
 492   3                {
 493   4                  count=0;    
 494   4                  setFloor(2);//显示数字
 495   4                  if(UP_req[2]==1)//二楼有上行请求，优先处理
 496   4                  {           
 497   5                        setUpLight();
 498   5                    UP_req[2]=0;
 499   5                        OUTPUT=0x00|(P2&0xf0);//电机停止
 500   5                        STOPCUR=1;
 501   5                        return 1;
 502   5                  }
 503   4                      if(DOWN_req[2]==1&&UP_req[3]==0&&DOWN_req[3]==0
 504   4                      &&DOWN_req[4]==0)//二楼有下行请求，上面两层没有请求，不再往上
 505   4                      {                  
 506   5                         setDownLight();
 507   5                         DOWN_req[2]=0;
 508   5                         STOPCUR=1;
 509   5                         OUTPUT=0x00|(P2&0xf0);//电机停止
 510   5                         FORREV=0;
 511   5                         return 1;
 512   5                      } 
 513   4                }
 514   3                if(CURFLR==3)//到达三楼
 515   3                {     
 516   4                  setFloor(3);//显示数字
 517   4                      count=0;
 518   4                  if(UP_req[3]==1)//三楼有上行请求,优先处理
 519   4                  {
 520   5                        setUpLight();
 521   5                    UP_req[3]=0;
 522   5                        OUTPUT=0x00|(P2&0xf0);//电机停止
 523   5                        STOPCUR=1;
 524   5                        return 1;
 525   5                  }
 526   4                      if(DOWN_req[3]==1&&DOWN_req[4]==0)//三楼有下行请求，四楼无请求，不再往上
 527   4                      {
 528   5                        setDownLight();
 529   5                        FORREV=0;
 530   5                        DOWN_req[3]=0;
 531   5                        STOPCUR=1;
 532   5                        OUTPUT=0x00|(P2&0xf0);//电机停止
 533   5                        return 1;
 534   5                      } 
 535   4                }
 536   3                if(CURFLR==4)//到达四楼
 537   3                {     
 538   4                  setFloor(4);//显示数字
 539   4                      setDownLight();
 540   4                      count=0;
 541   4                  if(DOWN_req[4]==1)//四楼有请求,四楼的请求只用向下的情况
 542   4                  {
 543   5                    DOWN_req[4]=0;
 544   5                        FORREV=0;
 545   5                        OUTPUT=0x00|(P2&0xf0);//电机停止
 546   5                        STOPCUR=1;
 547   5                  }
 548   4                }
 549   3              }
 550   2              else//判断下行是否到达请求层，下行请求优先处理
 551   2              {
C51 COMPILER V7.50   TASKS                                                                 06/28/2012 15:36:39 PAGE 10  

 552   3                CURFLR--;
 553   3                setDownLight();//下行等亮
 554   3      
 555   3               
 556   3      
 557   3                if(CURFLR==1)//到达一楼
 558   3                {     
 559   4                  setFloor(1);//显示数字
 560   4                      count=0;
 561   4                  if(UP_req[1]==1)//一楼有请求,一楼的请求只有向上的情况
 562   4                  {
 563   5                        setUpLight();
 564   5                    UP_req[1]=0;
 565   5                        FORREV=1;
 566   5                    OUTPUT=0x00|(P2&0xf0);//电机停止
 567   5                        STOPCUR=1;
 568   5                  }
 569   4                }
 570   3                if(CURFLR==2)//到达二楼
 571   3                {     
 572   4                  setFloor(2);//显示数字
 573   4                      count=0;
 574   4                  if(DOWN_req[2]==1)//二楼有下行请求，优先处理
 575   4                  {
 576   5                        setDownLight();
 577   5                    DOWN_req[2]=0;
 578   5                        OUTPUT=0x00|(P2&0xf0);//电机停止
 579   5                        STOPCUR=1;
 580   5                        return 1;
 581   5                  }
 582   4                      if(UP_req[2]==1&&UP_req[1]==0)//一楼无请求，不再往下
 583   4                      {
 584   5                        setUpLight();
 585   5                        FORREV=1;
 586   5                        UP_req[2]=0;
 587   5                        STOPCUR=1;
 588   5                        OUTPUT=0x00|(P2&0xf0);//电机停止
 589   5                      } 
 590   4                }
 591   3                if(CURFLR==3)//到达三楼
 592   3                {     
 593   4                  setFloor(3);//显示数字
 594   4                      count=0;
 595   4                  if(DOWN_req[3]==1)//三楼有下行请求，优先处理
 596   4                  {
 597   5                        setDownLight(); 
 598   5                    DOWN_req[3]=0;
 599   5                        OUTPUT=0x00|(P2&0xf0);//电机停止
 600   5                        STOPCUR=1;
 601   5                        return 1;
 602   5                  }
 603   4                      if(UP_req[1]==0&&DOWN_req[2]==0&&UP_req[2]==0&&UP_req[3]==1)
 604   4                      {
 605   5                        setUpLight();
 606   5                        FORREV=1;
 607   5                        UP_req[3]=0;
 608   5                        STOPCUR=1;
 609   5                        OUTPUT=0x00|(P2&0xf0);//电机停止
 610   5                      } 
 611   4                }
 612   3              }//end if-FORREV
 613   2      
C51 COMPILER V7.50   TASKS                                                                 06/28/2012 15:36:39 PAGE 11  

 614   2          return 1;
 615   2        }
 616   1        else
 617   1        {
 618   2          return 0;
 619   2        }//end if-count
 620   1      }
 621          
 622          /****************************************/
 623          /*               保存请求               */
 624          /****************************************/
 625          void storeUP(unsigned char x)
 626          {
 627   1        UP_req[x]=1;
 628   1      }
 629          void storeDOWN(unsigned char x)
 630          {
 631   1        DOWN_req[x]=1;
 632   1      }
 633          
 634          /****************************************/
 635          /*               功能函数               */
 636          /****************************************/
 637          //初始化所有灯
 638          void initLights()
 639          {
 640   1              P0=0x11;
 641   1      }
 642          
 643          //设置楼层显示
 644          void setFloor(int floor)
 645          {
 646   1              switch (floor)
 647   1              {
 648   2                      case 1:
 649   2                      {       
 650   3                              P0&=0xf0;//清零
 651   3                              P0|=0x01;break;
 652   3                      }
 653   2                      case 2:
 654   2                      {
 655   3                              P0&=0xf0;//清零
 656   3                              P0|=0x02;break;
 657   3                      }
 658   2                      case 3:
 659   2                      {
 660   3                              P0&=0xf0;//清零
 661   3                              P0|=0x03;break;
 662   3                      }
 663   2                      case 4:
 664   2                      {
 665   3                              P0&=0xf0;//清零
 666   3                              P0|=0x04;break;
 667   3                      }
 668   2                      default:
 669   2                      {
 670   3                              P0=0x06;break;
 671   3                      }
 672   2              }
 673   1      }
 674          
 675          //设置电梯向上运行灯
C51 COMPILER V7.50   TASKS                                                                 06/28/2012 15:36:39 PAGE 12  

 676          void setUpLight()
 677          {
 678   1              upLight=1;
 679   1              downLight=0;
 680   1      }
 681          
 682          //设置电梯向下运行灯
 683          void setDownLight()
 684          {
 685   1              upLight=0;
 686   1              downLight=1;
 687   1      }
 688          
 689          //设置电梯停止运行灯
 690          void setStopLight()
 691          {
 692   1              upLight=0;
 693   1              downLight=0;
 694   1      }
 695          
 696          //设置电梯报警灯和喇叭
 697          void setAlarmLight()
 698          {
 699   1              int num=0;//循环次数
 700   1              //设置警告灯亮
 701   1              while(START)
 702   1              {
 703   2                      num++;
 704   2                      if(!alarmBit)
 705   2                      {
 706   3                              alarmBit=1;
 707   3                      }
 708   2                      else//熄灭警告灯
 709   2                      {
 710   3                              alarmBit=0;
 711   3                      }
 712   2                      time(400);
 713   2              }
 714   1              offAlarmLight();        
 715   1      }
 716          
 717          //停止报警灯和喇叭
 718          void offAlarmLight()
 719          {
 720   1              alarmBit=1;
 721   1      }
 722          
 723          /******************************************/
 724          /*              延时函数                  */
 725          /******************************************/
 726          void delay_5us(void)
 727          {
 728   1        _nop_();
 729   1        _nop_();
 730   1      }
 731          void delay_50us(void)
 732          {
 733   1        unsigned char i;
 734   1        for(i=0;i<4;i++)
 735   1        {
 736   2          delay_5us();
 737   2        }
C51 COMPILER V7.50   TASKS                                                                 06/28/2012 15:36:39 PAGE 13  

 738   1      }
 739          void delay_100us(void)
 740          {
 741   1        delay_50us();
 742   1        delay_50us();
 743   1      }
 744          void time(unsigned ucMs)
 745          {
 746   1        unsigned char j;
 747   1        while(ucMs>0)
 748   1        {
 749   2          for(j=0;j<10;j++)
 750   2              delay_100us();
 751   2              ucMs--;
 752   2        }
 753   1      }
 754          
 755          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1505    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     17       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
